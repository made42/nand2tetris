// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {    

    static int heapBase;
    static int heapSize;

    static Array ram;
    static Array heap;
    static Array freeList;

    /** Initializes the class. */
    function void init() {        
        let heapBase = 2048;
        let heapSize = 14336;
        let ram = 0;
        let heap = heapBase;
        let heap[0] = 0;
        let heap[1] = heapSize - 2;
        let freeList = heapBase;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int segment, block_header;
        let segment = freeList;
        while (ram[segment + 1] < size + 2) {
            let segment = ram[segment];
        }
        let block_header = segment + 1 + ram[segment + 1] - size + 1 - 2;
        let ram[segment + 1] = ram[segment + 1] - size - 2;
        let ram[block_header + 1] = size;
        return block_header + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int block;
        let block = o - 2;
        let ram[o - 2] = freeList;
        let freeList = block;
        return;
    }
}
