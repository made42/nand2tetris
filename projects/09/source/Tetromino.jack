class Tetromino {

  field int numberOfSquares;
  field Array squares;
  field int t;
  field int orientation;

  constructor Tetromino new(int type) {
    let numberOfSquares = 4;
    let squares = Array.new(numberOfSquares);
    do setType(type);
    let orientation = 0;
    do draw();
    return this;
  }

  /** Disposes this tetromino. */
  method void dispose() {
    do Memory.deAlloc(this);
    return;
  }

  method void setType(int type) {
    var int xpos;
    var int ypos;
    let t = type;
    let xpos = 3;
    let ypos = 1;
    if (type = 0) {
      let xpos = xpos + 1;
      let ypos = 1;
      let squares[0] = Square.new(xpos, ypos);
      let squares[1] = Square.new(xpos + 1, ypos);
      let squares[2] = Square.new(xpos, ypos + 1);
      let squares[3] = Square.new(xpos + 1, ypos + 1);
    }
    if (type = 1) {
      let squares[0] = Square.new(xpos, ypos);
      let squares[1] = Square.new(xpos + 1, ypos);
      let squares[2] = Square.new(xpos + 2, ypos);
      let squares[3] = Square.new(xpos + 3, ypos);
    }
    if (type = 2) {
      let squares[0] = Square.new(xpos, ypos);
      let squares[1] = Square.new(xpos + 1, ypos);
      let squares[2] = Square.new(xpos + 2, ypos);
      let squares[3] = Square.new(xpos + 1, ypos + 1);
    }
    if (type = 3) {
      let squares[0] = Square.new(xpos, ypos);
      let squares[1] = Square.new(xpos + 1, ypos);
      let squares[2] = Square.new(xpos + 2, ypos);
      let squares[3] = Square.new(xpos + 2, ypos + 1);
    }
    if (type = 4) {
      let squares[0] = Square.new(xpos, ypos);
      let squares[1] = Square.new(xpos + 1, ypos);
      let squares[2] = Square.new(xpos + 2, ypos);
      let squares[3] = Square.new(xpos, ypos + 1);
    }
    if (type = 5) {
      let squares[0] = Square.new(xpos + 1, ypos);
      let squares[1] = Square.new(xpos + 2, ypos);
      let squares[2] = Square.new(xpos, ypos + 1);
      let squares[3] = Square.new(xpos + 1, ypos + 1);
    }
    if (type = 6) {
      let squares[0] = Square.new(xpos, ypos);
      let squares[1] = Square.new(xpos + 1, ypos);
      let squares[2] = Square.new(xpos + 1, ypos + 1);
      let squares[3] = Square.new(xpos + 2, ypos + 1);
    }
    return;
  }

  /** Draws the tetromino on the screen. */
  method void draw() {
    var int i;
    var Square square;
    let i = numberOfSquares - 1;
    while (i > -1) {
      let square = squares[i];
      if (square.getYpos() > (-1)) {
        do square.draw();
      }
      let i = i - 1;
    }
    return;
  }

  /** Erases the tetromino from the screen. */
  method void erase() {
    var int i;
    var Square square;
    let i = 0;
    while (i < numberOfSquares) {
      let square = squares[i];
      if (square.getYpos() > (-1)) {
        do square.erase();
      }
      let i = i + 1;
    }
    return;
  }

  /** Moves the tetromino down by `size` pixels. */
  method void moveDown() {
    var int i;
    var Square square;
    let i = numberOfSquares - 1;
    do erase();
    while (i > -1) {
      let square = squares[i];
      do square.moveDown();
      let i = i - 1;
    }
    do draw();
    return;
  }

  /** Moves the tetromino left by `size` pixels. */
  method void moveLeft() {
    var int i;
    var Square square;
    let i = 0;
    do erase();
    while (i < numberOfSquares) {
      let square = squares[i];
      do square.moveLeft();
      let i = i + 1;
    }
    do draw();
    return;
  }

  /** Moves the tetromino left by `size` pixels. */
  method void moveRight() {
    var int i;
    var Square square;
    let i = 0;
    do erase();
    while (i < numberOfSquares) {
      let square = squares[i];
      do square.moveRight();
      let i = i + 1;
    }
    do draw();
    return;
  }

  method Array getSquares() {
    return squares;
  }

  /** Gets the tetromino type. */
  method int getType() {
    return t;
  }

  /** Returns the direction of the */
  method int getOrientation() {
    return orientation;
  }

  /** Rotates the tetromino. */
  method void rotate() {
    var Square s0;
    var Square s1;
    var Square s2;
    var Square s3;
    var int xp;
    var int yp;
    var int i;

    do erase();
    if (t = 1) {
      if (orientation = 0) {
        let s0 = squares[0];
        let xp = s0.getXpos();
        let yp = s0.getYpos();
        do s0.setXpos(xp);
        do s0.setYpos(yp - 2);
        let s1 = squares[1];
        do s1.setXpos(xp);
        do s1.setYpos(yp - 1);
        let s2 = squares[2];
        do s2.setXpos(xp);
        do s2.setYpos(yp);
        let s3 = squares[3];
        do s3.setXpos(xp);
        do s3.setYpos(yp + 1);
      }
      if (orientation = 1) {
        let s0 = squares[0];
        let xp = s0.getXpos();
        let yp = s0.getYpos();
        do s0.setXpos(xp);
        do s0.setYpos(yp + 2);
        let s1 = squares[1];
        do s1.setXpos(xp + 1);
        do s1.setYpos(yp + 2);
        let s2 = squares[2];
        do s2.setXpos(xp + 2);
        do s2.setYpos(yp + 2);
        let s3 = squares[3];
        do s3.setXpos(xp + 3);
        do s3.setYpos(yp + 2);
      }
      if (orientation = 0) {
        let orientation = 1;
      } else {
        let orientation = 0;
      }
    }
    if (t = 2) {
      if (orientation = 0) {
        let s0 = squares[0];
        let xp = s0.getXpos();
        let yp = s0.getYpos();
        do s0.setXpos(xp + 1);
        do s0.setYpos(yp - 1);
        let s1 = squares[1];
        do s1.setXpos(xp);
        do s1.setYpos(yp);
        let s2 = squares[2];
        do s2.setXpos(xp + 1);
        do s2.setYpos(yp);
        let s3 = squares[3];
        do s3.setXpos(xp + 1);
        do s3.setYpos(yp + 1);
      }
      if (orientation = 1) {
        let s0 = squares[0];
        let xp = s0.getXpos();
        let yp = s0.getYpos();
        let s1 = squares[1];
        do s1.setXpos(xp - 1);
        do s1.setYpos(yp + 1);
        let s2 = squares[2];
        do s2.setXpos(xp);
        do s2.setYpos(yp + 1);
        let s3 = squares[3];
        do s3.setXpos(xp + 1);
        do s3.setYpos(yp + 1);
      }
      if (orientation = 2) {
        let s0 = squares[0];
        let xp = s0.getXpos();
        let yp = s0.getYpos();
        let s1 = squares[1];
        do s1.setXpos(xp );
        do s1.setYpos(yp + 1);
        let s2 = squares[2];
        do s2.setXpos(xp + 1);
        do s2.setYpos(yp + 1);
        let s3 = squares[3];
        do s3.setXpos(xp);
        do s3.setYpos(yp + 2);
      }
      if (orientation = 3) {
        let s0 = squares[0];
        let xp = s0.getXpos();
        let yp = s0.getYpos();
        do s0.setXpos(xp - 1);
        do s0.setYpos(yp + 1);
        let s1 = squares[1];
        do s1.setXpos(xp);
        do s1.setYpos(yp + 1);
        let s2 = squares[2];
        do s2.setXpos(xp + 1);
        do s2.setYpos(yp + 1);
        let s3 = squares[3];
        do s3.setXpos(xp);
        do s3.setYpos(yp + 2);
      }
      if (orientation = 0) {
        let orientation = 1;
      } else {
        if (orientation = 1) {
          let orientation = 2;
        } else {
          if (orientation = 2) {
            let orientation = 3;
          } else {
            if (orientation = 3) {
              let orientation = 0;
            }
          }
        }
      }
    }
    if (t = 3) {
      if (orientation = 0) {
        let s0 = squares[0];
        let xp = s0.getXpos();
        let yp = s0.getYpos();
        do s0.setXpos(xp + 1);
        do s0.setYpos(yp - 1);
        let s1 = squares[1];
        do s1.setXpos(xp + 1);
        do s1.setYpos(yp);
        let s2 = squares[2];
        do s2.setXpos(xp);
        do s2.setYpos(yp + 1);
        let s3 = squares[3];
        do s3.setXpos(xp + 1);
        do s3.setYpos(yp + 1);
      }
      if (orientation = 1) {
        let s0 = squares[0];
        let xp = s0.getXpos();
        let yp = s0.getYpos();
        do s0.setXpos(xp - 1);
        do s0.setYpos(yp);
        let s1 = squares[1];
        do s1.setXpos(xp - 1);
        do s1.setYpos(yp + 1);
        let s2 = squares[2];
        do s2.setXpos(xp);
        do s2.setYpos(yp + 1);
        let s3 = squares[3];
        do s3.setXpos(xp + 1);
        do s3.setYpos(yp + 1);
      }
      if (orientation = 2) {
        let s0 = squares[0];
        let xp = s0.getXpos();
        let yp = s0.getYpos();
        do s0.setXpos(xp + 1);
        do s0.setYpos(yp);
        let s1 = squares[1];
        do s1.setXpos(xp + 2);
        do s1.setYpos(yp);
        let s2 = squares[2];
        do s2.setXpos(xp + 1);
        do s2.setYpos(yp + 1);
        let s3 = squares[3];
        do s3.setXpos(xp + 1);
        do s3.setYpos(yp + 2);
      }
      if (orientation = 3) {
        let s0 = squares[0];
        let xp = s0.getXpos();
        let yp = s0.getYpos();
        do s0.setXpos(xp - 1);
        do s0.setYpos(yp + 1);
        let s1 = squares[1];
        do s1.setXpos(xp);
        do s1.setYpos(yp + 1);
        let s2 = squares[2];
        do s2.setXpos(xp + 1);
        do s2.setYpos(yp + 1);
        let s3 = squares[3];
        do s3.setXpos(xp + 1);
        do s3.setYpos(yp + 2);
      }
      if (orientation = 0) {
        let orientation = 1;
      } else {
        if (orientation = 1) {
          let orientation = 2;
        } else {
          if (orientation = 2) {
            let orientation = 3;
          } else {
            if (orientation = 3) {
              let orientation = 0;
            }
          }
        }
      }
    }
    if (t = 4) {
      if (orientation = 0) {
        let s0 = squares[0];
        let xp = s0.getXpos();
        let yp = s0.getYpos();
        do s0.setXpos(xp);
        do s0.setYpos(yp - 1);
        let s1 = squares[1];
        do s1.setXpos(xp + 1);
        do s1.setYpos(yp - 1);
        let s2 = squares[2];
        do s2.setXpos(xp + 1);
        do s2.setYpos(yp);
        let s3 = squares[3];
        do s3.setXpos(xp + 1);
        do s3.setYpos(yp + 1);
      }
      if (orientation = 1) {
        let s0 = squares[0];
        let xp = s0.getXpos();
        let yp = s0.getYpos();
        do s0.setXpos(xp + 2);
        do s0.setYpos(yp);
        let s1 = squares[1];
        do s1.setXpos(xp);
        do s1.setYpos(yp + 1);
        let s2 = squares[2];
        do s2.setXpos(xp + 1);
        do s2.setYpos(yp + 1);
        let s3 = squares[3];
        do s3.setXpos(xp + 2);
        do s3.setYpos(yp + 1);
      }
      if (orientation = 2) {
        let s0 = squares[0];
        let xp = s0.getXpos();
        let yp = s0.getYpos();
        do s0.setXpos(xp - 1);
        do s0.setYpos(yp);
        let s1 = squares[1];
        do s1.setXpos(xp - 1);
        do s1.setYpos(yp + 1);
        let s2 = squares[2];
        do s2.setXpos(xp - 1);
        do s2.setYpos(yp + 2);
        let s3 = squares[3];
        do s3.setXpos(xp);
        do s3.setYpos(yp + 2);
      }
      if (orientation = 3) {
        let s0 = squares[0];
        let xp = s0.getXpos();
        let yp = s0.getYpos();
        do s0.setXpos(xp - 1);
        do s0.setYpos(yp + 1);
        let s1 = squares[1];
        do s1.setXpos(xp);
        do s1.setYpos(yp + 1);
        let s2 = squares[2];
        do s2.setXpos(xp + 1);
        do s2.setYpos(yp + 1);
        let s3 = squares[3];
        do s3.setXpos(xp - 1);
        do s3.setYpos(yp + 2);
      }
      if (orientation = 0) {
        let orientation = 1;
      } else {
        if (orientation = 1) {
          let orientation = 2;
        } else {
          if (orientation = 2) {
            let orientation = 3;
          } else {
            if (orientation = 3) {
              let orientation = 0;
            }
          }
        }
      }
    }
    if (t = 5) {
      if (orientation = 0) {
        let s0 = squares[0];
        let xp = s0.getXpos();
        let yp = s0.getYpos();
        do s0.setXpos(xp - 1);
        do s0.setYpos(yp - 1);
        let s1 = squares[1];
        do s1.setXpos(xp - 1);
        do s1.setYpos(yp);
        let s2 = squares[2];
        do s2.setXpos(xp);
        do s2.setYpos(yp);
        let s3 = squares[3];
        do s3.setXpos(xp);
        do s3.setYpos(yp + 1);
      }
      if (orientation = 1) {
        let s0 = squares[0];
        let xp = s0.getXpos();
        let yp = s0.getYpos();
        do s0.setXpos(xp + 1);
        do s0.setYpos(yp + 1);
        let s1 = squares[1];
        do s1.setXpos(xp + 2);
        do s1.setYpos(yp + 1);
        let s2 = squares[2];
        do s2.setXpos(xp);
        do s2.setYpos(yp + 2);
        let s3 = squares[3];
        do s3.setXpos(xp + 1);
        do s3.setYpos(yp + 2);
      }
      if (orientation = 0) {
        let orientation = 1;
      } else {
        let orientation = 0;
      }
    }
    if (t = 6) {
      if (orientation = 0) {
        let s0 = squares[0];
        let xp = s0.getXpos();
        let yp = s0.getYpos();
        do s0.setXpos(xp + 1);
        do s0.setYpos(yp);
        let s1 = squares[1];
        do s1.setXpos(xp);
        do s1.setYpos(yp + 1);
        let s2 = squares[2];
        do s2.setXpos(xp + 1);
        do s2.setYpos(yp + 1);
        let s3 = squares[3];
        do s3.setXpos(xp);
        do s3.setYpos(yp + 2);
      }
      if (orientation = 1) {
        let s0 = squares[0];
        let xp = s0.getXpos();
        let yp = s0.getYpos();
        do s0.setXpos(xp - 1);
        do s0.setYpos(yp);
        let s1 = squares[1];
        do s1.setXpos(xp);
        do s1.setYpos(yp);
        let s2 = squares[2];
        do s2.setXpos(xp);
        do s2.setYpos(yp + 1);
        let s3 = squares[3];
        do s3.setXpos(xp + 1);
        do s3.setYpos(yp + 1);
      }
      if (orientation = 0) {
        let orientation = 1;
      } else {
        let orientation = 0;
      }
    }
    do draw();
    return;
  }
}
